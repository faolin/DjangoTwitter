{"version":3,"sources":["webpack:///./src/app/pages/annotate-tweets/annotate-tweets.component.html","webpack:///./src/app/pages/annotate-tweets/annotate-tweets.component.scss","webpack:///./src/app/pages/annotate-tweets/annotate-tweets.component.ts","webpack:///./src/app/pages/annotate-tweets/annotate-tweets.module.ts","webpack:///./src/app/services/visualization.service.ts"],"names":[],"mappings":"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","file":"app-pages-annotate-tweets-annotate-tweets-module.js","sourcesContent":["module.exports = \"<!-- partie keyword ou l'utilisateur rentre ses mots clés -->\\n<h2 [ngStyle]=\\\"{ color: '#282658', 'font-size': '20px' }\\\">Keywords</h2>\\n<div class=\\\"row\\\" [ngStyle]=\\\"{ background: 'white' }\\\">\\n  <!-- input ou l'utilisateur rentre le mot clé qu'il veut ajouter-->\\n  <div class=\\\"add-field col-lg-3\\\">\\n    <input\\n      class=\\\"add-input\\\"\\n      type=\\\"text\\\"\\n      name=\\\"keywords\\\"\\n      placeholder=\\\"Add keyword\\\"\\n      [(ngModel)]=\\\"keywordTyped\\\"\\n      (keyup.enter)=\\\"addKeyword()\\\"\\n    />\\n  </div>\\n  <!-- boutton ajouter -->\\n  <button id=\\\"addButton\\\" (click)=\\\"addKeyword()\\\">\\n    Add\\n  </button>\\n  <!-- container de tout les keywords actifs-->\\n  <div class=\\\"active-keyword-container\\\">\\n    <h5\\n      _ngcontent-c5=\\\"\\\"\\n      class=\\\"fs-title active-keyword-container-title\\\"\\n      *ngIf=\\\"activeKeywords.length > 0\\\"\\n    >\\n      Active keywords:\\n    </h5>\\n    <div class=\\\"active-keyword\\\" *ngFor=\\\"let keyword of activeKeywords\\\">\\n      <span class=\\\"active-keyword-label\\\">{{ keyword }}</span>\\n      <span class=\\\"active-keyword-close\\\" (click)=\\\"activeKeywordDelete($event)\\\"\\n        >×</span\\n      >\\n    </div>\\n  </div>\\n\\n  <!-- boutton confirmer les keywords actifs-->\\n  <button\\n    class=\\\"confirmationButton\\\"\\n    *ngIf=\\\"activeKeywords.length > 0\\\"\\n    (click)=\\\"showModal = true\\\"\\n  >\\n    Confirm these Keywords\\n  </button>\\n</div>\\n<!-- partie machine learning ou l'utilisateur annote les tweets et voit les informations relatives a son apprentissage -->\\n<h2 [ngStyle]=\\\"{ color: '#282658', 'font-size': '20px', 'padding-top': '1em' }\\\">\\n  Setup your machine learning\\n</h2>\\n<div class=\\\"row\\\" [ngStyle]=\\\"{ background: 'white' }\\\">\\n  <!--partie affichage du tweet et bouttons d'annotations-->\\n  <div class=\\\"col-lg-4\\\">\\n    <div *ngIf=\\\"noTweetFound === true && refreshingTweet === false\\\">\\n      <div class=\\\"fa fa-warning texteIndications\\\">\\n        No tweet was found. Wait for people to post tweets with your keywords in\\n        it. You can close this page and comeback later, all the tweets posted\\n        during your absence will be saved on the database. You can also try to\\n        refresh with the button bellow.\\n      </div>\\n    </div>\\n    <ngx-tweet tweetId=\\\"{{ tweetId }}\\\" *ngIf=\\\"tweetId\\\"></ngx-tweet>\\n    <div\\n\\n      id=\\\"buttonRefresh\\\"\\n      [ngClass]=\\\"{ 'fa-spin': refreshingTweet }\\\"\\n      class=\\\"fa fa-refresh fa-3x\\\"\\n      (click)=\\\"animateRefreshIcone(); getLastTweet()\\\"\\n      *ngIf=\\\"noTweetFound === true\\\"\\n    ></div>\\n    <button\\n      class=\\\"fa fa-check\\\"\\n      (click)=\\\"annotateTweet(1)\\\"\\n      id=\\\"interestingButton\\\"\\n      *ngIf=\\\"noTweetFound === false\\\"\\n    >\\n      interesting\\n    </button>\\n    <button\\n      class=\\\"fa fa-close\\\"\\n      (click)=\\\"annotateTweet(0)\\\"\\n      id=\\\"NoninterestingButton\\\"\\n      *ngIf=\\\"noTweetFound === false\\\"\\n    >\\n      Non interesting\\n    </button>\\n  </div>\\n  <!--partie informations sur l'apprentissage-->\\n  <div class=\\\"col-lg-8\\\">\\n    <p class=\\\"texteIndications\\\">\\n      you already treat\\n      <span id=\\\"nbrTweetsAnnoted\\\">{{ nbrTweetsAnnoted }}</span>\\n      tweets. To get an idea of how much you have to treat you can check the\\n      scores below. for the scores to be relevant you have to annotate at least\\n      a thousand tweets. \\n    </p>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"text-center info-box col-lg-4\\\">\\n        <div class=\\\"card-header indicateurHeader\\\">\\n          <h6 class=\\\"titleIndicator\\\">Accuracy</h6>\\n        </div>\\n        <div class=\\\"card-body indicateurBody\\\">\\n          <p class=\\\"numberTweetIndicator\\\">{{ accuracy }} %</p>\\n        </div>\\n      </div>\\n      <p class=\\\"col-lg-8 texteIndications\\\">\\n        It is the ratio of number of correct predictions to the total number of\\n        input samples. It works well only if there are equal number of samples\\n        belonging to each class. In reality you will not get a perfect 50-50\\n        repartition between interesting /non-interesting tweets. So you have to\\n        combine accuracy with precision and recall for a better comprehension of\\n        your model. (Accuracy should be > 90%)\\n      </p>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"text-center info-box col-lg-4\\\">\\n        <div class=\\\"card-header indicateurHeader\\\">\\n          <h6 class=\\\"titleIndicator\\\">Precision</h6>\\n        </div>\\n        <div class=\\\"card-body indicateurBody\\\">\\n          <p class=\\\"numberTweetIndicator\\\">{{ precision }} %</p>\\n        </div>\\n      </div>\\n      <p class=\\\"col-lg-8 texteIndications\\\">\\n        It is the number of correct positive results divided by the number of\\n        positive results predicted by the classifier. (precision should be >\\n        75%)\\n      </p>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"text-center info-box col-lg-4\\\">\\n        <div class=\\\"card-header indicateurHeader\\\">\\n          <h6 class=\\\"titleIndicator\\\">Recall</h6>\\n        </div>\\n        <div class=\\\"card-body indicateurBody\\\">\\n          <p class=\\\"numberTweetIndicator\\\">{{ recall }} %</p>\\n        </div>\\n      </div>\\n      <p class=\\\"col-lg-8 texteIndications\\\">\\n        It is the number of correct positive results divided by the number of\\n        all relevant samples (all samples that should have been identified as\\n        positive). (recall should be > 75%)\\n      </p>\\n    </div>\\n    <!-- boutton calculate scores-->\\n    <button class=\\\"confirmationButton\\\" (click)=\\\"calculateScores()\\\">\\n      calculate scores\\n    </button>\\n    <!-- boutton save model-->\\n    <button class=\\\"confirmationButton\\\" (click)=\\\"showModalSaveModel = true\\\">\\n      Save my model\\n    </button>\\n    <!-- boutton go to dashboard-->\\n    <button\\n    class=\\\"confirmationButton\\\"\\n    [routerLink]=\\\"['/pages/dashboard']\\\"\\n  >\\n    Go to dashboard\\n  </button>\\n  </div>\\n\\n  <!--fenetre de confirmation pour les keywords -->\\n  <div\\n    class=\\\"modal-container\\\"\\n    [hidden]=\\\"!showModal\\\"\\n    [ngClass]=\\\"{ animated: showModal, out: !showModal }\\\"\\n  >\\n    <div class=\\\"modal-background\\\">\\n      <div class=\\\"modal\\\" id=\\\"infoModal\\\">\\n        <span class=\\\"close\\\" id=\\\"close\\\" (click)=\\\"closeModal()\\\">&times;</span>\\n        <div id=\\\"toPrint\\\">\\n          <h4 class=\\\"info-modal-title\\\">Confirmation</h4>\\n          <h5 class=\\\"info-title\\\">\\n            By clicking on confirm you will delete your existing tweet's\\n            database and we will start a new connexion to twitter and gathering\\n            tweets filtered by the keywords you choose.\\n          </h5>\\n        </div>\\n\\n        <div id=\\\"modal-button-container\\\">\\n          <input\\n            type=\\\"button\\\"\\n            name=\\\"cancel\\\"\\n            class=\\\"action-button\\\"\\n            value=\\\"Cancel\\\"\\n            id=\\\"btnClose\\\"\\n            (click)=\\\"closeModal()\\\"\\n          />\\n          <button\\n            type=\\\"submit\\\"\\n            class=\\\"submit action-button\\\"\\n            (click)=\\\"stopDeleteDbTweetsStartStreamDjango()\\\"\\n          >\\n            Confirm\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <!--fenetre de choix de nom pour le modéle -->\\n  <div\\n    class=\\\"modal-container\\\"\\n    [hidden]=\\\"!showModalSaveModel\\\"\\n    [ngClass]=\\\"{ animated: showModalSaveModel, out: !showModalSaveModel }\\\"\\n  >\\n    <div class=\\\"modal-background\\\">\\n      <div class=\\\"modal\\\" id=\\\"infoModal\\\">\\n        <span class=\\\"close\\\" id=\\\"close\\\" (click)=\\\"closeModal()\\\">&times;</span>\\n        <h5 class=\\\"info-title\\\">\\n          Don't use spaces and any special character. Use this format if you\\n          want to specify multiple words : word1-word2\\n        </h5>\\n        <div id=\\\"toPrint\\\">\\n          <input\\n            type=\\\"text\\\"\\n            class=\\\"form-control\\\"\\n            id=\\\"input-1\\\"\\n            [(ngModel)]=\\\"nameOfTheModel\\\"\\n            placeholder=\\\"Choose a name for your model.\\\"\\n          />\\n        </div>\\n\\n        <div id=\\\"modal-button-container\\\">\\n          <input\\n            type=\\\"button\\\"\\n            name=\\\"cancel\\\"\\n            class=\\\"action-button\\\"\\n            value=\\\"Cancel\\\"\\n            id=\\\"btnClose\\\"\\n            (click)=\\\"closeModal()\\\"\\n          />\\n          <button\\n            type=\\\"submit\\\"\\n            class=\\\"submit action-button\\\"\\n            (click)=\\\"saveModel()\\\"\\n          >\\n            Confirm\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"@charset \\\"UTF-8\\\";\\n.texteIndications {\\n  color: #282658;\\n  font-weight: 700;\\n  padding-top: 1em; }\\n#nbrTweetsAnnoted {\\n  font-weight: 900;\\n  color: #ef8e63; }\\n.indicateurHeader {\\n  background-color: #18154e !important; }\\n.indicateurBody {\\n  background-color: #282658;\\n  padding: 0px; }\\n.titleIndicator {\\n  font-weight: bold;\\n  text-align: left;\\n  letter-spacing: 0;\\n  color: white;\\n  margin-bottom: 0; }\\n.numberTweetIndicator {\\n  font-weight: bold;\\n  text-align: center;\\n  font-size: 50px;\\n  color: white; }\\n#buttonRefresh {\\n  color: #ef8e63;\\n  margin-left: 50%;\\n  cursor: pointer; }\\n.add-field {\\n  width: 190px;\\n  position: relative;\\n  top: 4px;\\n  padding-left: 1em; }\\n.add-field .add-input {\\n  border: none;\\n  border-bottom: solid 2px #ccc;\\n  border-radius: 0;\\n  width: 100%;\\n  box-sizing: border-box;\\n  color: #282658;\\n  padding-top: 1em;\\n  transition: border-bottom 0.2s linear; }\\n.add-field .add-input:focus {\\n  border-bottom: solid 2px #282658; }\\nbutton {\\n  background: #ef8e63;\\n  font-weight: 600 !important;\\n  color: white;\\n  border: 0 none;\\n  border-radius: 1px;\\n  cursor: pointer;\\n  padding: 10px 5px;\\n  margin: 10px 0;\\n  transition: all 0.3s; }\\nbutton:hover {\\n  background: #ca783d; }\\n.button-container {\\n  position: absolute;\\n  bottom: 0;\\n  left: 0;\\n  display: flex;\\n  justify-content: center;\\n  width: 100%; }\\n.cgu-button-container {\\n  justify-content: space-evenly; }\\n.confirmationButton {\\n  display: block;\\n  margin-left: auto;\\n  margin-right: auto;\\n  width: 200px; }\\n#addButton {\\n  width: 50px; }\\n.active-keyword-container {\\n  width: 100%;\\n  padding: 0 0.7em;\\n  align-items: baseline; }\\n.active-keyword {\\n  display: inline-flex;\\n  padding: 0.3rem;\\n  background: #ef8e63;\\n  color: #fff;\\n  align-items: center;\\n  margin: 0.3rem; }\\n.active-keyword-label {\\n  font-weight: 700; }\\n.active-keyword-container-title {\\n  padding-right: 0.7em; }\\n.active-keyword-close {\\n  line-height: 1;\\n  display: inline-flex;\\n  padding-left: 5px;\\n  cursor: pointer;\\n  font-weight: 600; }\\n.action-button-user {\\n  width: 100%;\\n  background: #282658;\\n  font-weight: bold !important;\\n  color: white;\\n  cursor: pointer;\\n  margin-right: 10px;\\n  border: none; }\\n/*buttons fenetre suppression*/\\n.action-button {\\n  width: 150px;\\n  background: #282658;\\n  font-weight: bold !important;\\n  color: white;\\n  border: 0 none;\\n  border-radius: 1px;\\n  cursor: pointer;\\n  padding: 10px 5px;\\n  margin: 10px 5px; }\\n#myModal .action-button:hover,\\n#myModal .action-button:focus {\\n  background: #4845a1; }\\n/*boutton interessant*/\\n#interestingButton {\\n  background: #6eb000;\\n  width: 120px;\\n  margin-right: 1em; }\\n#interestingButton:hover {\\n  background: #ef8e63; }\\n/* boutton non-intérésant */\\n#NoninterestingButton {\\n  background-color: #d45d5a;\\n  width: 120px; }\\n#NoninterestingButton:hover {\\n  background: #ef8e63; }\\n/* The Close Button */\\n.close {\\n  color: #aaa;\\n  float: right;\\n  font-weight: bold; }\\n.close:hover,\\n.close:focus {\\n  color: black;\\n  text-decoration: none;\\n  cursor: pointer; }\\n#modal-button-container {\\n  text-align: right; }\\n.info-modal-title {\\n  text-align: center;\\n  font-weight: 700;\\n  text-transform: uppercase; }\\n.info-title {\\n  color: #777777;\\n  width: 80%;\\n  font-size: 13px;\\n  letter-spacing: 1px;\\n  margin-left: 2px;\\n  margin-top: 2em; }\\n.modal-container {\\n  position: fixed;\\n  display: table;\\n  height: 100%;\\n  width: 100%;\\n  top: 0;\\n  left: 0;\\n  -webkit-transform: scale(0);\\n          transform: scale(0);\\n  z-index: 99999 !important; }\\n.modal-container.animated {\\n  -webkit-transform: scale(1);\\n          transform: scale(1); }\\n.modal-container.animated .modal-background {\\n  -webkit-animation: fadeIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;\\n          animation: fadeIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards; }\\n.modal-container.animated .modal-background #infoModal {\\n  -webkit-animation: scaleUp 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;\\n          animation: scaleUp 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards; }\\n.modal-container.animated + .content {\\n  -webkit-animation: scaleBack 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;\\n          animation: scaleBack 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards; }\\n.modal-container.animated.out {\\n  -webkit-animation: quickScaleDown 0s 0.5s linear forwards;\\n          animation: quickScaleDown 0s 0.5s linear forwards; }\\n.modal-container.animated.out .modal-background {\\n  -webkit-animation: fadeOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;\\n          animation: fadeOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards; }\\n.modal-container.animated.out .modal-background #infoModal {\\n  -webkit-animation: scaleDown 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;\\n          animation: scaleDown 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards; }\\n.modal-container.animated.out + .content {\\n  -webkit-animation: scaleForward 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;\\n          animation: scaleForward 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards; }\\n.modal-container .modal-background {\\n  display: table-cell;\\n  background: rgba(0, 0, 0, 0.8);\\n  text-align: center;\\n  vertical-align: middle; }\\n.modal-container .modal-background #infoModal {\\n  background: white;\\n  padding: 20px;\\n  display: inline-block;\\n  border-radius: 3px;\\n  font-weight: 300;\\n  position: relative;\\n  width: 40%;\\n  text-align: left;\\n  height: 200px; }\\n@media (max-width: 1024px) {\\n  .modal-container .modal-background #infoModal {\\n    width: 80%; } }\\n@media (max-width: 520px) {\\n  .modal-container .modal-background #infoModal {\\n    height: 320px; } }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { DjangoService } from './../../services/django.service';\nimport { UserService } from '../../services/user.service';\nimport { VisualizationService } from '../../services/visualization.service';\n\n@Component({\n  selector: 'app-annotate-tweets',\n  templateUrl: './annotate-tweets.component.html',\n  styleUrls: ['./annotate-tweets.component.scss']\n})\nexport class AnnotateTweetsComponent implements OnInit {\n  // id du tweet que l'on affiche\n  tweetId: any = null;\n  // liste des keywords actifs\n  public activeKeywords = [];\n  // text dans l'input d'ajout de keyword\n  keywordTyped: string = null;\n  // affichage ou non de la fenetre de confirmation d'ajout de keywords\n  public showModal = false;\n  // affichage ou non de la fenetre pour rentrer le nom du modéle\n  public showModalSaveModel = false;\n  public nbrTweetsAnnoted = 0;\n  // affichage ou non du message indiquant qu'aucun tweets n'a été trouvés pour le moment\n  public noTweetFound = false;\n  // permet de savoir quand est ce que l'icone du refresh tourne ou non\n  public refreshingTweet = false;\n\n  public accuracy = 0;\n  public precision = 0;\n  public recall = 0;\n  public emailUser: String;\n  // nom du modéle choisi par l'utilisateur\n  public nameOfTheModel: String;\n  constructor(\n    private djangoService: DjangoService,\n    private userService: UserService,\n    private visualizationService: VisualizationService\n  ) {\n    this.emailUser = this.userService.getUser().email.toString();\n  }\n\n  ngOnInit() {\n    this.getLastTweet();\n    this.getNumberTweetsAnnoted();\n    // on récupére les mots clés actifs de l'utilisateur enregistrés sur la base\n    this.djangoService.getAllActiveKeywords(this.emailUser).subscribe(\n      data => {\n        if (data.keywords.length > 0) {\n          this.activeKeywords = data.keywords;\n          // si il y a des mots clés actifs, l'on stoppe au cas ou il ya déja un stream actif et on lance un nouveau stream\n          this.stopAndStartStream();\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  /**\n   * @description appel le service django pour récupérer le nombre de tweets annotés par l'utilisateur\n   */\n  getNumberTweetsAnnoted() {\n    this.djangoService.getNbrTweetsAnnoted(this.emailUser).subscribe(\n      data => {\n        this.nbrTweetsAnnoted = data.nbrTweetsAnnoted;\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  /**\n   * @description permet de récupérer les scores de recall, precision et accuracy\n   */\n  calculateScores() {\n    this.djangoService.calculateApprentissage(this.emailUser).subscribe(\n      data => {\n        console.log(data);\n        this.accuracy = Math.round(data.accuracy);\n        this.precision = Math.round(data.precision * 100);\n        this.recall = Math.round(data.recall * 100);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  /**\n   * @description permet de stopper et de redémarrer le stream (lancer au chargement de la page)\n   */\n  stopAndStartStream() {\n    this.djangoService\n      .stopAndStartStream(this.activeKeywords, this.emailUser, null)\n      .subscribe(\n        data => {\n          console.log(data);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n  /**\n   * @description permet de stopper le stream, supprimer la base de tweets et redémarrer un novueau stream\n   *  avec des mots clés choisis par l'utilisateur\n   */\n  stopDeleteDbTweetsStartStreamDjango() {\n    this.tweetId = null;\n    this.noTweetFound = true;\n    // une fois que l'utilisateur a cliqué sur confirmer on enléve la fenetre de suppression et on démarre le stream\n    this.showModal = false;\n    this.djangoService\n      .stopDeleteDbTweetsAndStartStream(\n        this.activeKeywords,\n        this.emailUser,\n        null\n      )\n      .subscribe(\n        data => {\n          console.log(data);\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n  /**\n   * @description permet d'animer l'icone de rafraichissement du dernier tweet\n   */\n  animateRefreshIcone() {\n    this.refreshingTweet = true;\n    setTimeout(() => this.refreshingTweet = false, 2000);\n  }\n  /**\n   * @description permet de récupérer le dernier tweet non annotés de la base de données du serveur django\n   */\n  getLastTweet() {\n    this.djangoService.getLastTweet(this.emailUser).subscribe(\n      data => {\n        this.noTweetFound = false;\n        this.tweetId = data.tweet_id;\n        this.refreshingTweet = false;\n        this.getNumberTweetsAnnoted();\n      },\n      error => {\n        console.log(error);\n        // si le serveur nous renvoie un 404 on sait que c'est parcequ'il n'a pas trouvé de tweets non annotés\n        if (error.status === 404) {\n          this.noTweetFound = true;\n          this.tweetId = null;\n        }\n      }\n    );\n  }\n  /**\n   * @description permet d'annoter un tweet et d'envoyer l'annotation au serveur django qu'il l'enregistre sur la base\n   * @param annotation\n   */\n  annotateTweet(annotation) {\n    console.log(this.tweetId);\n    this.djangoService.annotateTweet(this.tweetId, annotation).subscribe(\n      data => {\n        this.tweetId = null;\n        this.getLastTweet();\n        console.log(data);\n      },\n      error => {\n        console.log(error);\n        /*si le serveur nous renvoie un 404 on sait que c'est parceque le stream a redémarré, la base a été supprimé\n        et l'utilisateur essaye d'annoter un tweet qui n'existe plus dans la base */\n        if (error.status === 404) {\n          this.noTweetFound = true;\n          this.tweetId = null;\n        }\n      }\n    );\n  }\n  /**\n   * @description Fonction lancée lorsque l'on clique sur le bouton \"cancel\" ou sur la croix en haut du modal\n   */\n  public closeModal() {\n    this.showModal = false;\n    this.showModalSaveModel = false;\n    document.body.classList.remove('modal-active');\n  }\n  /**\n   * @description permet de rajouter un keyword a la liste des keywords actifs\n   */\n  public addKeyword() {\n    if (this.keywordTyped !== null) {\n      // on rajoute le mot clé a la liste des keyword actifs\n      this.activeKeywords.push(this.keywordTyped);\n      // l'on supprime ce que viens de taper l'utilisateur\n      this.keywordTyped = null;\n    }\n  }\n\n  /**\n   * Supprime un Keyword actif de l'affichage\n   * @param event Évènement déclenché par le bouton \"x\" d'un Keyword actif\n   */\n  public activeKeywordDelete(event) {\n    // Récupère le label du Keyword à supprimer dans la vue\n    const toDelete = event.target.parentElement.querySelector(\n      '.active-keyword-label'\n    ).innerHTML;\n\n    // Parcourt tous les Keyword actifs et supprime celui dont le label est égal à celui récupéré\n    for (let i = 0; i < this.activeKeywords.length; i++) {\n      if (this.activeKeywords[i] === toDelete) {\n        this.activeKeywords.splice(i, 1);\n      }\n    }\n  }\n  /**\n   * @description appel au service pour sauvegarder le modéle d'apprentissage de l'utilisateur\n   */\n  public saveModel() {\n    this.showModalSaveModel = false;\n    this.djangoService.saveModel(this.nameOfTheModel, this.emailUser).subscribe(\n      data => {\n        console.log(data);\n      },\n      error => {\n        console.log(error);\n        if (error.status === 409) {\n          this.visualizationService.openToastr(\n            'Name already used',\n            'Error',\n            'error');\n        }\n      }\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AnnotateTweetsComponent } from './annotate-tweets.component';\nimport { NgxTweetModule } from 'ngx-tweet';\nimport { SpinnerModule } from '../../theme/components/spinner/spinner.module';\nexport const routes = [\n  { path: '', component: AnnotateTweetsComponent, data: { breadcrumb: 'Annotate tweets' } },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes),\n    NgxTweetModule,\n    SpinnerModule,\n  ],\n  declarations: [\n    AnnotateTweetsComponent,\n  ]\n})\nexport class AnnotateTweetModule { }\n","import { Injectable } from '@angular/core';\nimport { ToastrService, GlobalConfig } from 'ngx-toastr';\n\n/**\n * Service contenant des fonctions d'affichage communes à plusieurs composants\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class VisualizationService {\n  private options: GlobalConfig;\n  /**\n   * @constructor\n   * @param toastrService Service permettant de créer les messages colorés en haut à droite\n   */\n  constructor(public toastrService: ToastrService) {\n    this.options = this.toastrService.toastrConfig;\n  }\n\n  /**\n   * Fonction executée lors d'un clic en dehors des inputs avec la directive \"platformClickOutside\",\n   * si l'input est vide, retire la classe \"active\" de tous les labels de ces inputs\n   */\n  public platformClickedOutside(isClickedOutside: any): boolean {\n    if (!isClickedOutside) {\n      const inputs = document.querySelectorAll('.input-material');\n\n      [].forEach.call(inputs, function (input) {\n        if (input.value === '') {\n          input.parentElement\n            .querySelector('.label-material')\n            .classList.remove('active');\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Ajoute la class \"active\" au label de l'input cliqué.\n   * @param event Evénement déclenché lors d'un clic sur un des inputs\n   */\n  public textInputClick(inputEvent: any): boolean {\n    inputEvent.stopPropagation();\n    document\n      .getElementById(inputEvent.target.id)\n      .parentElement.querySelector('.label-material')\n      .classList.add('active');\n    return false;\n  }\n\n  /**\n   * Ajoute la class \"active\" au label de l'input qui a subit un changement.\n   * @param event Evénement déclenché lors d'un changement sur un des inputs\n   */\n  public textInputChange(inputEvent: any) {\n    document\n      .getElementById(inputEvent.target.id)\n      .parentElement.querySelector('.label-material')\n      .classList.add('active');\n  }\n\n  /**\n   * Vérifie si une case à cocher est coché ou non\n   * @param checkboxID Identifiant de la case à vérifier\n   * @returns true si coché, false sinon\n   */\n  public checkBoxActiveOrNot(checkboxID) {\n    if (jQuery('#' + checkboxID).prop('checked') === true) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Crée le Toastr (message coloré en haut à droite) après avoir soumis le formulaire de création du client\n   * @param message Message qui sera affiché dans le Toastr\n   * @param title Titre du Toastr\n   * @param type Type du Toastr définissant la couleur; \"warning\" : orange, \"error\" : rouge, \"success\" : vert\n   */\n  public openToastr(\n    message: string,\n    title: string,\n    type: string\n  ): ToastrService {\n    const m = message;\n    const t = title;\n    const opt = JSON.parse(JSON.stringify(this.options));\n    const inserted = this.toastrService[type](m, t, opt);\n    return inserted;\n  }\n}\n"],"sourceRoot":""}